#!/usr/bin/python3

import os
import requests
import json
import asyncio
import sys
import time
import re
from random import randrange

import genshin
from bs4 import BeautifulSoup

# TODO: Add some more sites to scrape for codes. The fandom wiki works reliably,
# unlike some other sites but is on the rather slow side when it comes to adding the new codes.

def errprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def extract_active_codes(soup):
    codes = []
    for tr in soup.find("table").findAll("tr"):
        tds = tr.findAll("td")
        for i, td in enumerate(tds):
            code = str(td.find("code"))
            if code != "None":
                if "Expired:" in str(tds[i+3]):
                    continue
                codes.append(code[code.find('>')+1 : code.find('</')])
    return codes

async def claim_daily(client):
    try:
        await client.claim_daily_reward()
    except genshin.AlreadyClaimed:
        errprint("Daily check-in rewards have already been claimed.")
    except genshin.GeetestTriggered:
        errprint("Geetest triggered during daily reward claim\n\
Please read: https://github.com/c4em/collei/#geetest-triggered-during-daily-reward-claim")
        return False
    except Exception as e:
        errprint(f"Could not claim daily rewards: \"{e}\"")
        return False

def get_codes_from_file(file):
    if not os.path.exists(file):
        os.mknod(file)
    with open(file, "r") as file:
        return file.readlines()

async def redeem_codes(codes, file_codes, client):
    new_codes = file_codes
    for code in codes:
        if code+"\n" not in file_codes:
            print(f"Redeeming code: {code}")
            try:
                await client.redeem_code(code)
            except genshin.InvalidCookies:
                errprint("Could not claim codes due to a invalid cookie")
                return None
            except Exception as e:
                errprint(f"Could not redeem code {code}: '{e}'")
            finally:
                new_codes.append(code)
            time.sleep(6+randrange(2))
    return new_codes

def save_codes(codes, file):
    with open(file, "w") as file:
        for code in codes:
            if code[-1] == "\n":
                file.write("".join(code))
            else:
                file.write("".join(code) + "\n")

async def redeem_genshin(cookies):
    time.sleep(randrange(5))
    client = genshin.Client(cookies, debug=False, game=genshin.Game.GENSHIN)

    skip_daily = os.environ.get("SKIP_DAILY")
    if skip_daily is None or len(str(skip_daily)) == 0:
        print("Claiming daily check-in rewards for Genshin Impact")
        if await claim_daily(client) == False:
            return False
    else: 
        print("Skipping daily rewards for Genshin Impact")

    skip_codes = os.environ.get("SKIP_CODES")
    if skip_codes is None or len(str(skip_codes)) == 0:
        res = requests.get("https://genshin-impact.fandom.com/wiki/Promotional_Code")
        soup = BeautifulSoup(res.text, "html.parser")
        active_codes = extract_active_codes(soup)

        file_codes = get_codes_from_file("genshin_codes.txt")
        new_codes = await redeem_codes(active_codes, file_codes, client)
        if new_codes is None:
            return False

        save_codes(file_codes, "genshin_codes.txt")
    else:
        print("Skipping codes for Genshin Impact")

async def redeem_starrail(cookies):
    time.sleep(randrange(5))
    client = genshin.Client(cookies, debug=False, game=genshin.Game.STARRAIL)

    skip_daily = os.environ.get("SKIP_DAILY")
    if skip_daily is None or len(str(skip_daily)) == 0:
        print("Claiming daily check-in rewards for Honkai Star Rail")
        if await claim_daily(client) == False:
            return False
    else:
        print("Skipping daily rewards for Honkai Star Rail")

    skip_codes = os.environ.get("SKIP_CODES")
    if skip_codes is None or len(str(skip_daily)) == 0:
        res = requests.get("https://honkai-star-rail.fandom.com/wiki/Redemption_Code")
        soup = BeautifulSoup(res.text, "html.parser")
        active_codes = extract_active_codes(soup)

        file_codes = get_codes_from_file("starrail_codes.txt")
        new_codes = await redeem_codes(active_codes, file_codes, client)
        if new_codes is None:
            return False

        save_codes(new_codes, "starrail_codes.txt")
    else:
        print("Skipping codes for Honkai Star Rail")

def fix_cookies(cookies):
    if cookies is None or len(str(cookies)) == 0:
        return "" 

    if "cookie_token" not in cookies:
        if "cookie_token_v2" not in cookies:
            errprint("Missing cookie_token, please read the troubleshooting section in the README.md")
            exit(1)

    if "account_id" not in cookies:
        account_id = f"account_id={re.findall('ltuid=(.*?);', cookies)[0]}; "
        mhyuuid_idx = cookies.index("_MHYUUID=")
        cookies = cookies[:mhyuuid_idx] + account_id + cookies[mhyuuid_idx:]

    return cookies

async def main():
    genshin_cookies = fix_cookies(os.environ.get("GENSHIN_COOKIES"))
    starrail_cookies = fix_cookies(os.environ.get("STARRAIL_COOKIES"))

    if len(genshin_cookies) + len(starrail_cookies) == 0:
        errprint("COOKIES secrets are not set. Please read the setup section in README.md to proceed.")
        exit(1)

    did_fail=False
    if len(genshin_cookies) > 0:
        if await redeem_genshin(genshin_cookies) == False:
            errprint("Failed at claiming Genshin Impact rewards")
            did_fail=True

    if len(starrail_cookies) > 0:
        if await redeem_starrail(starrail_cookies) == False:
            errprint("Failed at claiming Honkai Star Rail rewards")
            did_fail=True

    if did_fail == True:
        exit(1)

if __name__ == '__main__':
    asyncio.run(main())

